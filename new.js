var fs              = require('fs'),
    PEG             = require('pegjs'),
    readline        = require('readline'),
    stream          = require('stream'),
    clc             = require('cli-color'),
    buffer          = '',
    voidFound       = false,
    scan            = false,
    showExc         = false,
    nl              = '\n',
    count           = 0,
    lineNum         = 0,
    repeats         = 1,
    runner          = fs.createWriteStream("/Users/martyn/_unity_quick_setup/dev/Unity/test/build/testunityRunner2.c",
                                           {encoding: 'utf8'}),

    test_start      = 'start = test_function',
    test_one_ws     = 'test_one_ws = [" "\\t]+',
    test_all_ws     = 'test_all_ws = [" "\\t]*',
    test_void       = 'test_void = "void"',
    testname_prefix = 'testname_prefix = "test" / "Test"',
    test_name       = 'test_name = testname_prefix [a-zA-Z_0-9]+' + nl + testname_prefix,
    test_body       = " test_body = '{' test_body '}' / ('{'.*'}') ",
    test_params     = 'test_params = "(" test_params ")" / "(" test_all_ws' +
      '("void" / ("int" test_one_ws [a-zA-Z_0-9]+ ) / "") test_all_ws ")"' +
      test_all_ws + nl + test_one_ws,
    test_function   = 'test_function = test_all_ws test_void test_one_ws ' +
      'test_name test_all_ws test_params test_all_ws test_body' +
      test_all_ws  + nl +
      test_void    + nl +
      test_one_ws  + nl +
      testname_prefix + nl +
      test_name    + nl +
      test_all_ws  + nl +
      test_params  + nl +
      test_body;

function writeParseString(string){
  fs.writeFileSync('./test_parser.peg', string, 'utf8');
}

writeParseString(test_start + nl + test_function);

function buildParser(string){
  return PEG.buildParser(fs.readFileSync("./test_parser.peg", 'utf8'));
}

function parse(parser, x){
  try {
    return parser.parse(x);
  }
  catch(err) {
    if (showExc)
      console.log(clc.magentaBright(err));
    return false;
  }
}

//var test_params = 'test_params = "(" [" "\t]* "void" [" "\t]* ")"';
var p = buildParser(test_function);
var outstream = fs.createWriteStream('./output');

if(writeMain(
  writeIncludes(
    writeRunTestFunc(runner))))
{
  for(var a = 0; a < repeats; a++)
  {
    var instream = fs.createReadStream("/Users/martyn/_unity_quick_setup/dev/Unity/test/tests/testunity.c",
                                       {encoding: 'utf8'});
    var rl = readline.createInterface({
      input: instream,
      output: outstream,
      terminal: false
    });
    outstream.readable = false;
    outstream.writable = true;
    //  var outstream = new stream;

    rl.on('line', function(line) {
      lineNum += 1;
      if(voidFound == false) {
        var index = line.indexOf('void');
        if(index > -1) {
          voidFound = true;
        }
      }
      if(voidFound){
        buffer += ' ' + line;
        if(buffer.indexOf('}') > -1) {
          scan = true;
          voidFound = false;
        }
      }
      if(scan){
        console.log('buffer = ', buffer, '\n');
        scan = false;
        var parsed = (parse(p, buffer));
        buffer = '';
        console.log('parsed =', parsed)
        if(parsed) {
          count += 1;
          // console.log(parsed[1] + ' ' + parsed[3][0][0] +  parsed[3][1].join('') + '(' + parsed[5][2] + ')' + nl);
          //          console.log(parsed[3][0]);
          var str = (parsed[3][1].join(''));
          writeTest(lineNum, parsed[3][0] + parsed[3][1].join(''), runner);
          //          if(count % 1 === 0 ){
          if(count % repeats === 0 ){
            console.log("Running test:", count);
          }
          outstream.write(count + ' ' + lineNum + ' ' + str);
        }
      }
    });
//      .on('close', function(){
//        writeUnityEnd(runner);
//      });
  }
  if(a == repeats - 1){
    writeUnityEnd(runner);
  }
}
//  RUN_TEST(testUnitySizeInitializationReminder, 64);

function writeUnityEnd(runner){
  runner.write('\nreturn (UnityEnd());');
}

function writeTest(line, test, runner) {
  runner.write('RUN_TEST(' + test + ', ' + (line.toString()) + ');' + nl);
}

function writeRunTestFunc(runner){
  runner.write("\n\
/* AUTOGENERATED FILE. DO NOT EDIT. */\n\
\n\
//=======Test Runner Used To Run Each Test Below=====\n\
\n\
#define RUN_TEST(TestFunc, TestLineNum) \\\n\
{ \\\n\
  Unity.CurrentTestName = #TestFunc; \\\n\
  Unity.CurrentTestLineNumber = TestLineNum; \\\n\
  Unity.NumberOfTests++; \\\n\
  if (TEST_PROTECT()) \\\n\
  { \\\n\
    setUp(); \\\n\
    TestFunc(); \\\n\
  } \\\n\
  if (TEST_PROTECT() && !TEST_IS_IGNORED) \\\n\
  { \\\n\
    tearDown(); \\\n\
  } \\\n\
  UnityConcludeTest(); \\\n\
}");
  return runner;
}

function writeIncludes(runner)
{
  runner.write('\
\n\n//=======Automagically Detected Files To Include=====\n\
#include "unity.h"\n\
#include <setjmp.h>\n\
#include <stdio.h>\n\
#include <setjmp.h>\n\
#include <string.h>\n\
');
  return runner;
}

function writeMain(runner){
  runner.write('\n\
//=======Test Reset Option=====\n\
void resetTest(void);\n\
void resetTest(void)\n\
{\n\
  tearDown();\n\
  setUp();\n\
}\n\n\
//=======MAIN=====\n\
int main(void)\n\
{\n\
  UnityBegin("tests/testunity.c");\n\
');
  return runner;
}
